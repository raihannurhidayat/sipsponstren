// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  role       Role      @default(user)
  banned     Boolean?
  banReason  String?
  banExpires DateTime?
  Template   Template?
  Letter     Letter[]

  @@unique([email])
  @@map("user")
}

model Template {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     String
  createdBy   String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("templates")
}

enum Status {
  Review
  Approved
  Rejected
}

model letterType {
  id           String   @id @default(cuid())
  name         String?  @unique
  nomenclature String?
  status       String   @default("active")
  description  String?
  createdAt    DateTime @default(now())

  @@map("letter_types")
}

model Letter {
  id           String    @id @default(cuid())
  userId       String
  template     String
  data         String
  status       Status    @default(Review)
  submitted_at DateTime  @default(now())
  approved_at  DateTime?
  pdfUrl       String?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("letters")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
